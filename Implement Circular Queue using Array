// Implement Circular Queue using Array

public class QueueB
{
    public static class Queue{
    
    
    static int arr[];
    static int size;
    static int rear;
    static int front;
    
    //constructor for initialization 
    Queue(int n){
        arr = new int[n];
        size = n;
        rear=-1;
        front =-1;
    }
    
    // Functions
    
    //isEmpty
    
    public static boolean isEmpty(){
        return (front==-1 && rear ==-1);
    }

    public static boolean isFull(){
        return ((rear+1)%size==front);
    }
    
    //add 
    
    public static void add(int i){
        //check if its full
        if(isFull()){
            System.out.println("Queue is full");
            return;
        }
        

    // adding first Element

        if(front ==-1){
            front =0;

        }

        rear=(rear+1)%size;
        arr[rear]=i;
    }
    
    // remove
    
    public static int remove(){
        if (isEmpty()==true){
            System.out.println("Queue is Empty");
            return -1;
        }
        
        int f=arr[front];
        if(front == rear){
            front=rear =-1;
        }
        else{
            front = (front+1)%size; 
        }
        return f;

    }
    
    //peek
    
    public static int peek(){
        if(isEmpty()){
            System.out.println("Empty");
            return -1;
        }
        
        int f=arr[front];
        return f;
    }
    
}
	public static void main(String[] args) {
	    
	    Queue q=new Queue(3);
	    q.add(1);
	    q.add(2);
	    q.add(3);

        System.out.println(q.remove());
        q.add(4);
        System.out.println(q.remove());
        q.add(5);
        System.out.println();
	     
	    while(!q.isEmpty()){
	        System.out.println(q.peek());
	        q.remove();
	    }
	}
}

