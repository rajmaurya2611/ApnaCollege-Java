//TREE TRAVAERSALS
import java.util.*;
public class Tree {
    public static class Node{
        int data;
        Node left;
        Node right;

        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }

    static class BinaryTree{
        static int i=-1;
        public static Node buildtree(int nodes[]){
            i++;
            if(nodes[i]==-1){
                return null;
            }

            Node newNode = new Node(nodes[i]);
            newNode.left=buildtree(nodes);
            newNode.right=buildtree(nodes);

            return newNode;
        }
    }

    //Preorder Traversal

    public static void preorder(Node root){
        if(root==null){
            return;
        }
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }

    //Inorder Traversal

    public static void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }

    public static void postorder(Node root){
        if(root==null){
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+" ");
    }

    //Level Order Traversal

    public static void level(Node root){
        if(root==null){
            return;
        }

        Queue<Node> q=new LinkedList<>();
        q.add(root);
        q.add(null);

        while(!q.isEmpty()){
           Node curr = q.remove();
           if(curr==null){
            System.out.println();
            if(q.isEmpty()){
                break;
            }
            else{
                q.add(null);
            }
           } 
           else{
            System.out.print(curr.data+" ");
            if(curr.left!=null){
                q.add(curr.left);
            }
            if(curr.right!=null){
                q.add(curr.right);
            }
           }
        }

    }
    public static void main(String[] args) {
       int nodes[]={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1} ;
       BinaryTree tree = new BinaryTree();
       Node root = tree.buildtree(nodes);
       System.out.println(root.data);
       preorder(root);
       System.out.println();
       inorder(root);
       System.out.println();
       postorder(root);
       System.out.println();
       level(root);
    }
    
}
